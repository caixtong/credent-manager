name: release

on:
  workflow_dispatch:
  push:
    branches: [ release ]

jobs:
# ================================
#              macOS
# ================================
  osx-build:
    name: Build macOS
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Indicate full history so Nerdbank.GitVersioning works.

    - name: Set up dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.201
    
    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: |
        dotnet build --configuration=MacRelease
    
    - name: Run macOS unit tests
      run: |
        dotnet test --configuration=MacRelease

    - name: Lay out payload and symbols
      run: |
        src/osx/Installer.Mac/layout.sh --configuration=MacRelease --output=payload --symbol-output=symbols

    - name: Create keychain
      env:
        CERT_BASE64: ${{ secrets.DEVELOPER_CERTIFICATE_BASE64 }}
        CERT_PASSPHRASE: ${{ secrets.DEVELOPER_CERTIFICATE_PASSWORD }}
      run: |
        security create-keychain -p pwd $RUNNER_TEMP/buildagent.keychain
        security default-keychain -s $RUNNER_TEMP/buildagent.keychain
        security unlock-keychain -p pwd $RUNNER_TEMP/buildagent.keychain
        echo $CERT_BASE64 | base64 -D > $RUNNER_TEMP/cert.p12
        security import $RUNNER_TEMP/cert.p12 -k $RUNNER_TEMP/buildagent.keychain -P $CERT_PASSPHRASE -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k pwd $RUNNER_TEMP/buildagent.keychain
    
    - name: Developer sign
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        .github/run_developer_signing.sh payload $APPLE_TEAM_ID $GITHUB_WORKSPACE/src/osx/Installer.Mac/entitlements.xml

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tmp.osx-build
        path: |
          payload
          symbols
  
  osx-payload-sign:
    name: Sign macOS payload
    # ESRP service requires signing to run on Windows
    runs-on: windows-latest
    needs: osx-build
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Download payload
      uses: actions/download-artifact@v3
      with:
        name: tmp.osx-build
    
    - name: Zip unsigned payload
      shell: pwsh
      run: |
        Compress-Archive -Path payload payload/payload.zip
        cd payload
        Get-ChildItem -Exclude payload.zip | Remove-Item -Recurse -Force
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up ESRP client
      shell: pwsh
      env:
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
        AUTH_CERT: ${{ secrets.AZURE_VAULT_AUTH_CERT_NAME }}
        REQUEST_SIGNING_CERT: ${{ secrets.AZURE_VAULT_REQUEST_SIGNING_CERT_NAME }}
      run: |
        .github\set_up_esrp.ps1
    
    - name: Run ESRP client
      shell: pwsh
      env:
        AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
        # We temporarily need two AAD IDs, as we're using an SSL certificate associated
        # with an older App Registration until we have the required hardware to approve
        # the new certificate in SSL Admin.
        AZURE_AAD_ID_SSL: ${{ secrets.AZURE_AAD_ID_SSL }}
        APPLE_KEY_CODE: ${{ secrets.APPLE_KEY_CODE }}
        APPLE_SIGNING_OP_CODE: ${{ secrets.APPLE_SIGNING_OPERATION_CODE }}
      run: |
        python .github\run_esrp_signing.py payload $env:APPLE_KEY_CODE $env:APPLE_SIGNING_OP_CODE --params 'Hardening' '--options=runtime'
    
    - name: Unzip signed payload
      shell: pwsh
      run: |
        Expand-Archive signed/payload.zip -DestinationPath signed
        Remove-Item signed/payload.zip

    - name: Upload signed payload
      uses: actions/upload-artifact@v3
      with:
        name: osx-payload-sign
        path: |
          signed
  
  osx-pack:
    name: Package macOS payload
    runs-on: macos-latest
    needs: osx-payload-sign
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Indicate full history so Nerdbank.GitVersioning works.

    - name: Set up dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.201
    
    # Install Nerdbank.GitVersioning
    - uses: dotnet/nbgv@master
      with:
        setCommonVars: true

    - name: Download signed payload
      uses: actions/download-artifact@v3
      with:
        name: osx-payload-sign
    
    - name: Create component package
      run: |
        src/osx/Installer.Mac/pack.sh --payload=payload --version=$GitBuildVersionSimple --output=components/com.microsoft.gitcredentialmanager.component.pkg
    
    - name: Create product archive
      run: |
        src/osx/Installer.Mac/dist.sh --package-path=components --version=$GitBuildVersionSimple --output=pkg/gcm-osx-x64-$GitBuildVersionSimple.pkg || exit 1
    
    - name: Upload package
      uses: actions/upload-artifact@v3
      with:
        name: tmp.osx-pack
        path: |
          pkg
  
  osx-sign:
    name: Sign and notarize macOS package
    # ESRP service requires signing to run on Windows
    runs-on: windows-latest
    needs: osx-pack
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Download unsigned package
      uses: actions/download-artifact@v3
      with:
        name: tmp.osx-pack
        path: pkg
    
    - name: Zip unsigned package
      shell: pwsh
      run: |
        Compress-Archive -Path pkg/*.pkg pkg/gcm-pkg.zip
        cd pkg
        Get-ChildItem -Exclude gcm-pkg.zip | Remove-Item -Recurse -Force
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up ESRP client
      shell: pwsh
      env:
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
        AUTH_CERT: ${{ secrets.AZURE_VAULT_AUTH_CERT_NAME }}
        REQUEST_SIGNING_CERT: ${{ secrets.AZURE_VAULT_REQUEST_SIGNING_CERT_NAME }}
      run: |
        .github\set_up_esrp.ps1
    
    - name: Sign package
      shell: pwsh
      env:
        AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
        # We temporarily need two AAD IDs, as we're using an SSL certificate associated
        # with an older App Registration until we have the required hardware to approve
        # the new certificate in SSL Admin.
        AZURE_AAD_ID_SSL: ${{ secrets.AZURE_AAD_ID_SSL }}
        APPLE_KEY_CODE: ${{ secrets.APPLE_KEY_CODE }}
        APPLE_SIGNING_OP_CODE: ${{ secrets.APPLE_SIGNING_OPERATION_CODE }}
      run: |
        python .github\run_esrp_signing.py pkg $env:APPLE_KEY_CODE $env:APPLE_SIGNING_OP_CODE
    
    - name: Unzip signed package
      shell: pwsh
      run: |
        mkdir unsigned
        Expand-Archive -LiteralPath signed\gcm-pkg.zip -DestinationPath .\unsigned -Force
        Remove-Item signed\gcm-pkg.zip -Force
    
    - name: Notarize signed package
      shell: pwsh
      env:
        AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
        # We temporarily need two AAD IDs, as we're using an SSL certificate associated
        # with an older App Registration until we have the required hardware to approve
        # the new certificate in SSL Admin.
        AZURE_AAD_ID_SSL: ${{ secrets.AZURE_AAD_ID_SSL }}
        APPLE_KEY_CODE: ${{ secrets.APPLE_KEY_CODE }}
        APPLE_NOTARIZATION_OP_CODE: ${{ secrets.APPLE_NOTARIZATION_OPERATION_CODE }}
      run: |
        python .github\run_esrp_signing.py unsigned $env:APPLE_KEY_CODE $env:APPLE_NOTARIZATION_OP_CODE --params 'BundleId' 'com.microsoft.gitcredentialmanager'
    
    - name: Publish signed package
      uses: actions/upload-artifact@v3
      with:
        name: osx-sign
        path: signed/*.pkg